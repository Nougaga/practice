mutate(sum=sum(V1,V2,V3,V4,V5),
mean=sum/5)
View(sp)
View(sp)
sp %>%
mutate(sum=apply(1,sum))
sp$sum <- apply(sp,1,sum)
sp %>% mutate(mean=sum/5)
View(df)
View(df)
View(sp)
View(sp)
View(sp)
View(sp)
sp %>% mutate(mean=sum/5)
View(sp)
View(sp)
sp <- sp %>% mutate(mean=sum/5)
View(sp)
View(sp)
sp %>% hist()
sp %>% hist(mean)
hist(sp$mean)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35));lines(density(sp$mean))
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="dark green");lines(density(sp$mean))
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
sp <- sp %>% mutate(sum2=sum(sp[,1:5]))
View(sp)
View(sp)
sp <- sp %>% mutate(sum2=apply(sp,1,sum))
View(df)
View(df)
View(sp)
View(sp)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
set.seed(1)
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
sp_sum[i] <- sum(sp[[i]])
sp_mean[i] <- sp_sum[i]/5
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum2=apply(sp,1,sum))
# sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
View(sp)
View(sp)
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
set.seed(1)
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
sp_sum[i] <- sum(sp[[i]])
sp_mean[i] <- sp_sum[i]/5
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
sp_sum[i] <- sum(sp[[i]])
sp_mean[i] <- sp_sum[i]/5
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
sp_sum[i] <- sum(sp[[i]])
sp_mean[i] <- sp_sum[i]/5
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
df2 <- data.frame(sample(0:9,5,replace =T), stringsAsFactors = FALSE)
View(df2)
View(df2)
for(i in 1:100){
df2[i] <- matrix(sample(0:9,5,replace=T))
}
df2 <- t(df2)
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
library(dplyr)
li = seq(0,9,by=1)
sp = c()
sp_sum = c()
sp_mean = c()
for (i in 1:100){
sp <- append(sp, sample(li, size=5, replace=T))
}
sp <- matrix(sp, ncol=5, byrow=T)
sp <- as.data.frame(sp)
sp <- sp %>% mutate(sum=apply(sp,1,sum))  # sp$sum <- apply(sp,1,sum)
sp <- sp %>% mutate(mean=sum/5)
hist(sp$mean, labels=T, freq=F, ylim=c(0,0.35), col="green");lines(density(sp$mean))
qnorm(0.05)
qnorm(0.05)
E = 89/225
A = 89/225
B = c(0.363. 0.551. 0.363. 0.218)
B = c(0.363, 0.551, 0.363, 0.218)
C = (B-A)^2
C
C = sum((B-A)^2)/A
C
data <- read.csv("..\\..\\..\\data\\cleanDescriptive.csv")
data <- read.csv("..\\..\\..\\data\\cleanDescriptive.csv", header=T)
head(data)
head(data)
data <- read.csv("..\\..\\..\\data\\cleanDescriptive.csv", header=T)
# 변수 리코딩
x <- data$level2
y <- data$pass2
result <- data.frame(Level=x, Pass=y)
dim(result)
dim(result); head(result)
dim(result); head(result)
dim(data); head(data)
dim(data); head(data)
dim(result); head(result)
install.packages("gmodels")
library(gmodels)
library(ggplot2)
?gmodels
# 1) 교차분할표 작성
gmodels::CrossTable(result$Level, result$Pass)
table(result)
chisq.test(c(4,6,17,16,8,9))
count(6, c(5,5,5,6,4,1))
chisq.test(c(4,6,17,16,8,9))
data1 <- read.csv("..\\..\\..\\data\\cleanDescriptive.csv", header=T)
CrossTable(x, y, chisq = T)
data1 <- read.csv("..\\..\\..\\data\\cleanDescriptive.csv", header=T)
str(data1)
x <- data1$level2   # 종속변수(설명변수)
y <- data1$pass2    # 반응변수
CrossTable(x, y, chisq = T)
data <- read.csv("..\\..\\..\\03stat_!\\one_sample.csv", header=T)
data
data
summary(x); length(x); table(x)
data <- read.csv("..\\..\\..\\03stat_!\\one_sample.csv", header=T)
head(data)
x <- data$survey
summary(x); length(x); table(x)
summary(x); length(x); table(x)
binom.test(c(136,14), p=0.8)
# binom.test(c(136,14), p=0.8)
binom.test(c(136,14), p=0.8, alternative="two.sided", conf.level=0.95)
# 2. 방향성을 갖는 단측가설 검정
binom.test(c(136,14), p=0.8, alternative="greater", conf.level = 0.95)
binom.test(c(136,14), p=0.8)
# 1. 양측검정
binom.test(c(136,14), p=0.8, alternative="two.sided", conf.level=0.95)
# 2. 방향성을 갖는 단측가설 검정
binom.test(c(136,14), p=0.8, alternative="greater", conf.level = 0.95)
# 1. 양측검정
binom.test(c(136,14), p=0.8, alternative="two.sided", conf.level=0.95)
# 2. 방향성을 갖는 단측가설 검정
binom.test(c(136,14), p=0.8, alternative="greater", conf.level = 0.95)
# 데이터 정제
mean(x, na.rm=T)
x1 <- na.omit(x); mean(x1)
data <- read.csv("..\\..\\..\\03stat_!\\one_sample.csv", header=T)
str(data); head(data)
str(data); head(data)
x <= data$time
# 데이터 분포 확인, 결측치 제거
summary(x)
mean(x)
mean(x)
x1 <- na.omit(x); mean(x1)
# 정규분포 검정
shapiro.text(x1)
# 정규분포 검정
shapiro.test(x1)
hist(x1)
result <- t.test(x1,mu=5.2, alter="twd.side", conf.level=0.95)
result <- t.test(x1,mu=5.2, alter="twd.sided", conf.level=0.95)
result <- t.test(x1,mu=5.2, alter="two.sided", conf.level=0.95)
result
data <- read.csv("..\\..\\..\\03stat_!\\one_sample.csv", header=T)
str(data); head(data)
x <= data$time
# 데이터 분포 확인, 결측치 제거
summary(x)
mean(x)
# 데이터 정제
mean(x, na.rm=T)
x1 <- na.omit(x); mean(x1)
# 정규분포 검정
shapiro.test(x1)
hist(x1)
qqnorm(x1)
qqline(x1, lty=1, col="blue")
t.test(x1, mu=5.2)
result <- t.test(x1,mu=5.2, alter="two.sided", conf.level=0.95)
result
data <- data <- read.csv("..\\..\\..\\03stat_!\\two_sample.csv", header=T)
data <- data <- read.csv("..\\..\\..\\03stat_!\\two_sample.csv", header=T)
x <- data$method
y <- data$survey
table(x); table(y)
table(x,y)
CrossTable(x,y)
prop.test(c(110,135), c(150,150), alternative="two.sided", conf.level=0.95)
# 비율검정 1. 양측 검정정
prop.test(c(110,135), c(150,150), alternative="two.sided", conf.level=0.95)
# 비율검정 2. 방향성이 있는 단측설 검정
prop.test(c(110,135), c(150,150), alternative="greater", conf.level=0.95)
prop.test(c(110,135), c(150,150), alternative="two.sided", conf.level=0.95)
# 비율검정 2. 방향성이 있는 단측설 검정
prop.test(c(110,135), c(150,150), alternative="greater", conf.level=0.95)
data <- data <- read.csv("..\\..\\..\\03stat_!\\two_sample.csv", header=T)
# 두 집단 subset 작성 및 데이터 전처리
x <- data$method
y <- data$survey
# 집단별 빈도분석
table(x); table(y)
# 교차분석
table(x,y)
CrossTable(x,y)
# 비율검정 1. 양측 검정정
prop.test(c(110,135), c(150,150), alternative="two.sided", conf.level=0.95)
# 비율검정 2. 방향성이 있는 단측설 검정
prop.test(c(110,135), c(150,150), alternative="greater", conf.level=0.95)
# 2. 방향성을 갖는 단측가설 검정
binom.test(c(136,14), p=0.8, alternative="greater", conf.level = 0.95)
summary(data)
data <- read.csv("검정1\\smoke.csv", header=T)
summary(data)
head(data)
dim(data)
boxplot(data)
boxplot(data$education)
plot(data$education)
plot(data$smoking)
View(data)
View(data)
plot(data)
shapiro.test(data)
table(data)
dim(data)
str(data)
x <- data$education
y <- data$smoking
CrossTable(x, y, chisq = T)
CrossTable(x, y, chisq = T)
data1 <- read.csv("..\\..\\..\\data\\cleanDescriptive.csv", header=T)
str(data1)
x <- data1$level2   # 종속변수(설명변수)
y <- data1$pass2    # 반응변수
CrossTable(x, y, chisq = T)
CrossTable(x, y, chisq = T)
data <- read.csv("검정1\\smoke.csv", header=T)
head(data)
summary(data)
str(data)
dim(data)
table(data)
x <- data$education
y <- data$smoking
CrossTable(x, y, chisq = T)
table(data)
CrossTable(x, y, chisq = T)
data <- read.csv("검정1\\cleanData.csv", header=T)
head(data)
summary(data) # NA 없음
x <- data$age3
y <- data$position
test <- data[,c("age3","position")]
data <- data[,c("age3","position")]
summary(data) # NA 없음
str(data)     # 범주형과 비슷한 int
dim(data)
table(data)
data <- data[!is.na]
data[,!is.na]
data[,!is.na()]
data[!NA]
data[,!NA]
data[!is.na(data)]
data <- data[!is.na(data)]
dim(data)
data
data <- read.csv("검정1\\cleanData.csv", header=T)
data <- data[,c("age3","position")]
summary(data) # position에 NA 9개
data[,!is.na(data)]
data
data$position
data <- data[,!is.na(data$position)]
data <- data[!is.na(data$position)]
data <- na.omit(data)
dim(data)
data <- read.csv("검정1\\cleanData.csv", header=T)
data <- data[,c("age3","position")]
str(data)     # 범주형과 비슷한 int
dim(data)
data <- na.omit(data)
dim(data)
str(data)     # 범주형과 비슷한 int
x <- data$age3
y <- data$position
CrossTable(x, y, chisq = T)
table(data)
CrossTable(x, y, chisq = T)
data <- read.csv("검정1\\response.csv", header=T)
head(data)
summary(data) # NA 없음
str(data)     # 범주형과 비슷한 int
dim(data)
table(data)
x <- data$job
y <- data$response
CrossTable(x,y)
table(x,y)
test <- table(x,y)
test[1]
test[1,1]
test <- table(x,y)
table(x,y)
test
test[2]
test[1,]
test[,1]
cy1 = test[,1]  # 무응답
cy2 = test[,2]  # 낮음
cy3 = test[,3]  # 높음
cy_total = apply(test, 1, sum)
cy_total
prop.test(cy1, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
# prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy3, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy1, cy_total, alternative="greater", conf.level=0.95)
prop.test(cy2, cy_total, alternative="greater", conf.level=0.95)
prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy2, cy_total, alternative="greater", conf.level=0.95)
prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy2, cy_total, alternative="greater", conf.level=0.95)
prop.test(cy3, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy3, cy_total, alternative="greater", conf.level=0.95)
prop.test(cy1, cy_total, alternative="less", conf.level=0.95)
prop.test(cy2, cy_total, alternative="less", conf.level=0.95)
prop.test(cy1, cy_total, alternative="less", conf.level=0.95)
prop.test(cy1, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy1, cy_total, alternative="greater", conf.level=0.95)
prop.test(cy1, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy3, cy_total, alternative="two.sided", conf.level=0.95)
CrossTable(x,y)
CrossTable(x,y,chisq = T)
CrossTable(x, y, chisq = T)
data <- read.csv("검정1\\cleanData.csv", header=T)
data <- data[,c("age3","position")]
summary(data) # position에 NA 9개
data <- na.omit(data)
str(data)     # 범주형과 비슷한 int
dim(data)
table(data)
x <- data$age3
y <- data$position
CrossTable(x, y, chisq = T)
data <- read.csv("검정1\\smoke.csv", header=T)
head(data)
summary(data) # NA 없음
str(data)     # 범주형과 비슷한 int
dim(data)
table(data)
x <- data$education
y <- data$smoking
CrossTable(x, y, chisq = T)
prop.test(cy1, cy_total, alternative="two.sided", conf.level=0.95)
data <- read.csv("검정1\\response.csv", header=T)
head(data)
summary(data) # NA 없음
str(data)     # 범주형과 비슷한 int
dim(data)
table(data)
x <- data$job
y <- data$response
test <- table(x,y)
cy1 = test[,1]  # 무응답
cy2 = test[,2]  # 낮음
cy3 = test[,3]  # 높음
cy_total = apply(test, 1, sum)
prop.test(cy1, cy_total, alternative="two.sided", conf.level=0.95)
# prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy3, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy1, cy_total, alternative="two.sided", conf.level=0.95)
# prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy3, cy_total, alternative="two.sided", conf.level=0.95)
CrossTable(x, y, chisq = T)
CrossTable(x,y,chisq = T)
data <- read.csv("검정1\\response.csv", header=T)
head(data)
summary(data) # NA 없음
str(data)     # 범주형과 비슷한 int
dim(data)
table(data)
x <- data$job
y <- data$response
test <- table(x,y)
cy1 = test[,1]  # 무응답
cy2 = test[,2]  # 낮음
cy3 = test[,3]  # 높음
cy_total = apply(test, 1, sum)
CrossTable(x,y,chisq = T)
prop.test(cy1, cy_total, alternative="two.sided", conf.level=0.95)
prop.test(cy2, cy_total, alternative="two.sided", conf.level=0.95)
