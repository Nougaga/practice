summary(bigBlogData_lm2)
dwtest(bigBlogData_lm2)
par(mfrow=c(2,2))
plot(bigBlogData_lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(bigBlogData_lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(bigBlogData_lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(bigBlogData_lm2, which=4)  # 극단치
bigBlogData2 <- bigBlogData
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
bigBlogData_lm2 <- lm(score~., data=bigBlogData2)
summary(bigBlogData_lm2)
dwtest(bigBlogData_lm2)
par(mfrow=c(2,2))
plot(bigBlogData_lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(bigBlogData_lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(bigBlogData_lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(bigBlogData_lm2, which=4)  # 극단치
bigBlogData2 <- bigBlogData2[c(-10235
),]
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
bigBlogData_lm2 <- lm(score~., data=bigBlogData2)
summary(bigBlogData_lm2)
dwtest(bigBlogData_lm2)
par(mfrow=c(2,2))
plot(bigBlogData_lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(bigBlogData_lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(bigBlogData_lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(bigBlogData_lm2, which=4)  # 극단치
bigBlogData2 <- bigBlogData2[c(-5569, 8127, 10722),]
bigBlogData2 <- bigBlogData
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
bigBlogData_lm2 <- lm(score~., data=bigBlogData2)
summary(bigBlogData_lm2)
dwtest(bigBlogData_lm2)
par(mfrow=c(2,2))
plot(bigBlogData_lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(bigBlogData_lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(bigBlogData_lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(bigBlogData_lm2, which=4)  # 극단치
bigBlogData2 <- bigBlogData2[c(-10235),]
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
bigBlogData_lm2 <- lm(score~., data=bigBlogData2)
summary(bigBlogData_lm2)
dwtest(bigBlogData_lm2)
par(mfrow=c(2,2))
plot(bigBlogData_lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(bigBlogData_lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(bigBlogData_lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(bigBlogData_lm2, which=4)  # 극단치
bigBlogData2 <- bigBlogData2[c(-5569,-8127,-10722),]
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
bigBlogData_lm2 <- lm(score~., data=bigBlogData2)
summary(bigBlogData_lm2)
dwtest(bigBlogData_lm2)
par(mfrow=c(2,2))
plot(bigBlogData_lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(bigBlogData_lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(bigBlogData_lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(bigBlogData_lm2, which=4)  # 극단치
bigBlogData2 <- bigBlogData2[c(-5567,-5568,-10652),]
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
bigBlogData_lm2 <- lm(score~., data=bigBlogData2)
summary(bigBlogData_lm2)
dwtest(bigBlogData_lm2)
par(mfrow=c(2,2))
plot(bigBlogData_lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(bigBlogData_lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(bigBlogData_lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(bigBlogData_lm2, which=4)  # 극단치
bigBlogData3 <- bigBlogData2
step(bigBlogData_lm2, direction = "both")
summary(step(bigBlogData_lm2, direction = "both"))
bigBlogData3 <- bigBlogData2
bigBlogData3$daysdiff2 <- bigBlogData3$daysdiff^2
View(bigBlogData3)
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
length(bigBlogData2$cnt_kw_t)
bigBlogData2 <- bigBlogData2[,]
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
lm2 <- lm(score~., data=bigBlogData2)
summary(lm2)
dwtest(lm2)
par(mfrow=c(2,2))
plot(lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(lm2, which=4)  # 극단치
lm1 <- lm(score~., data=bigBlogData)
summary(lm1)
dwtest(lm1)
par(mfrow=c(2,2))
plot(lm1, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(lm1, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(lm1, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(lm1, which=4)  # 극단치
lm3 <- lm(score~., data=bigBlogData3)
summary(lm3)
step3 <- step(lm3, direction = "both")
summary(step3)
summary(lm3)
summary(step3)
dwtest(step3)
par(mfrow=c(2,2))
plot(step3, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(step3, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(step3, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(step3, which=4)  # 극단치
1.736e-05
1.736e-05/-5.220e-09
-3325.67/2
-1662.835/365
blogData_gadi <- get_blogDataSet("가산디지털단지역")
View(blogData_gadi)
pred <- blogData_gadi$items
View(pred)
rm(pred$score)
pred <- pred[,-"score"]
pred <- pred[,1:16]
pred
pred$daysdiff2 <- pred$daysdiff^2
pred
pred$score <- fitted.values(step3)
View(pred)
View(pred)
str(step3)
pred3 <- predict(step3, pred)
pred3
summary(pred3)
row.names(pred) <- 1:length(pred$title)
pred$rank_origin <- 1:length(pred$title)
pred3
length(pred3)
row.names(pred) <- 1:length(pred$title)
pred
tail(pred)
pred$rank_origin <- 1:length(pred$title)
pred3 <- predict(step3, pred)
pred3
pred$rank_pred <- predict(step3, pred)
rank(c(5,2,3))
pred$rank_pred <- rank(predict(step3, pred))
pred$rank_pred <- as.integer(pred$rank_pred)
plot(pred$rank_origin, pred$rank_pred)
?abline
plot(pred$rank_origin, pred$rank_pred);abline(a=0,b=1)
?abline
plot(pred$rank_origin, pred$rank_pred);abline(a=0, b=1, col="red")
pred <- blogData_amongus$items
pred <- pred[,1:16]
pred$daysdiff2 <- pred$daysdiff^2
row.names(pred) <- 1:length(pred$title)
pred$rank_origin <- 1:length(pred$title)
pred$rank_pred <- rank(predict(step3, pred))
pred$rank_pred <- as.integer(pred$rank_pred)
plot(pred$rank_origin, pred$rank_pred);abline(a=0, b=1, col="red")
pred <- blogData_adscontact$items
pred <- pred[,1:16]
pred$daysdiff2 <- pred$daysdiff^2
row.names(pred) <- 1:length(pred$title)
pred$rank_origin <- 1:length(pred$title)
pred$rank_pred <- rank(predict(step3, pred))
pred$rank_pred <- as.integer(pred$rank_pred)
plot(pred$rank_origin, pred$rank_pred);abline(a=0, b=1, col="red")
pred <- blogData_momoland$items
pred <- blogData_hotelwithanimal$items
pred <- pred[,1:16]
pred$daysdiff2 <- pred$daysdiff^2
row.names(pred) <- 1:length(pred$title)
pred$rank_origin <- 1:length(pred$title)
pred$rank_pred <- rank(predict(step3, pred))
pred$rank_pred <- as.integer(pred$rank_pred)
plot(pred$rank_origin, pred$rank_pred);abline(a=0, b=1, col="red")
pred <- blogData_engineer2$items
pred <- pred[,1:16]
pred$daysdiff2 <- pred$daysdiff^2
row.names(pred) <- 1:length(pred$title)
pred$rank_origin <- 1:length(pred$title)
pred$rank_pred <- rank(predict(step3, pred))
pred$rank_pred <- as.integer(pred$rank_pred)
plot(pred$rank_origin, pred$rank_pred);abline(a=0, b=1, col="red")
pred <- blogData_s20$items
pred <- pred[,1:16]
pred$daysdiff2 <- pred$daysdiff^2
row.names(pred) <- 1:length(pred$title)
pred$rank_origin <- 1:length(pred$title)
pred$rank_pred <- rank(predict(step3, pred))
pred$rank_pred <- as.integer(pred$rank_pred)
plot(pred$rank_origin, pred$rank_pred);abline(a=0, b=1, col="red")
pred <- blogData_gadi$items
row.names(pred) <- 1:length(pred$title)
pred$daysdiff2 <- pred$daysdiff^2
pred$score_pred <- predict(step3, pred)
plot(pred$score, pred$score_pred);abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred, ylim=c(0,1));abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred, xlim=c(0,1), ylim=c(0,1));abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred, xlim=c(0.9,1), ylim=c(0,1));abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred, xlim=c(0.9,1), ylim=c(0.9,1));abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred, xlim=c(0.95,1), ylim=c(0.9,1));abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred, );abline(a=0, b=1, col="red")
blogData_7years <- get_blogDataSet("7years")
pred <- blogData_gadi$items
pred <- blogData_7years$items
row.names(pred) <- 1:length(pred$title)
pred$daysdiff2 <- pred$daysdiff^2
pred$score_pred <- predict(step3, pred)
plot(pred$score, pred$score_pred);abline(a=0, b=1, col="red")
pred <- blogData_gadi$items
row.names(pred) <- 1:length(pred$title)
pred$daysdiff2 <- pred$daysdiff^2
blogData_gadi$total
pred$rank_pred <- as.integer(pred$score_pred*blogData_gadi$total)
pred$rank_pred <- as.integer(pred$score_pred -1)
pred$score_pred <- predict(step3, pred)
pred$rank_pred <- as.integer(pred$score_pred -1)
pred$rank_pred <- as.integer(pred$score_pred * blogData_gadi$total)
View(pred)
View(pred)
pred$score_pred <- predict(step3, pred[,c(8,10,12,13,15,16,18)])
pred$rank_pred <- as.integer(pred$score_pred * blogData_gadi$total)
plot(pred$score, pred$score_pred);abline(a=0, b=1, col="red")
plot(pred$rank_pred);abline(a=0, b=1, col="red")
plot$rank_pred2 <- rank(pred$score_pred)
pred$score_pred
rank(pred$score_pred)
pred$rank_pred2 <- rank(pred$score_pred)
plot(pred$rank_pred2);abline(a=0, b=1, col="red")
plot(pred$rank_pred);abline(a=0, b=1, col="red")
plot(pred$rank_pred);abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred);abline(a=0, b=1, col="red")
tempfunc <- function (DATASET){
DATASET$items$cnt_list <- rep(DATASET$total)
return(DATASET)
}
tempfunc <- function (DATASET){
DATASET$items$cnt_list <- rep(DATASET$total)
}
tempfunc(blogData_onepiece)
head(blogData_onepiece$items)
tempfunc <- function (DATASET){
DATASET$items$cnt_list <- rep(DATASET$total)
return(DATASET)
}
blogData_onepiece <- tempfunc(blogData_onepiece)
head(blogData_onepiece$items)
blogData_onepiece <- tempfunc(blogData_onepiece)
blogData_jeanjacket <- tempfunc(blogData_jeanjacket)
blogData_engineer1 <- tempfunc(blogData_engineer1)
blogData_engineer2 <- tempfunc(blogData_engineer2)
blogData_corona <- tempfunc(blogData_corona)
blogData_pest <- tempfunc(blogData_pest)
blogData_momoland <- tempfunc(blogData_momoland)
blogData_bfmv <- tempfunc(blogData_bfmv)
blogData_s20 <- tempfunc(blogData_s20)
blogData_mcsq <- tempfunc(blogData_mcsq)
blogData_python <- tempfunc(blogData_python)
blogData_cobol <- tempfunc(blogData_cobol)
blogData_dogcafe <- tempfunc(blogData_dogcafe)
blogData_hotelwithanimal <- tempfunc(blogData_hotelwithanimal)
blogData_newton <- tempfunc(blogData_newton)
blogData_langmuir <- tempfunc(blogData_langmuir)
blogData_amongus <- tempfunc(blogData_amongus)
blogData_flashgame <- tempfunc(blogData_flashgame)
blogData_greenreview <- tempfunc(blogData_greenreview)
blogData_adscontact <- tempfunc(blogData_adscontact)
bigBlogData <- rbind(blogData_onepiece$items,
blogData_jeanjacket$items,
blogData_engineer1$items,
blogData_engineer2$items,
blogData_corona$items,
blogData_pest$items,
blogData_momoland$items,
blogData_bfmv$items,
blogData_s20$items,
blogData_mcsq$items,
blogData_python$items,
blogData_cobol$items,
blogData_dogcafe$items,
blogData_hotelwithanimal$items,
blogData_newton$items,
blogData_langmuir$items,
blogData_amongus$items,
blogData_flashgame$items,
blogData_greenreview$items,
blogData_adscontact$items
)
bigBlogData <- bigBlogData[,8:17]
bigBlogData <- rbind(blogData_onepiece$items,
blogData_jeanjacket$items,
blogData_engineer1$items,
blogData_engineer2$items,
blogData_corona$items,
blogData_pest$items,
blogData_momoland$items,
blogData_bfmv$items,
blogData_s20$items,
blogData_mcsq$items,
blogData_python$items,
blogData_cobol$items,
blogData_dogcafe$items,
blogData_hotelwithanimal$items,
blogData_newton$items,
blogData_langmuir$items,
blogData_amongus$items,
blogData_flashgame$items,
blogData_greenreview$items,
blogData_adscontact$items
)
bigBlogData <- bigBlogData[,8:length(bigBlogData)]
View(bigBlogData)
View(bigBlogData)
PerformanceAnalytics::chart.Correlation(as.matrix(bigBlogData))
PerformanceAnalytics::chart.Correlation(as.matrix(bigBlogData))
lm1 <- lm(score~., data=bigBlogData)
summary(lm1)
summary(lm1)
par(mfrow=c(2,2))
plot(lm1, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(lm1, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(lm1, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(lm1, which=4)  # 극단치
row.names(bigBlogData) <- 1:length(bigBlogData$cnt_kw_t)
lm1 <- lm(score~., data=bigBlogData)
summary(lm1)
dwtest(lm1)
par(mfrow=c(2,2))
plot(lm1, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(lm1, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(lm1, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(lm1, which=4)  # 극단치
bigBlogData3 <- bigBlogData
bigBlogData2 <- bigBlogData
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
length(bigBlogData2$cnt_kw_t)
bigBlogData2 <- bigBlogData2[-10235,]
bigBlogData2 <- bigBlogData2[-10235,]
row.names(bigBlogData2) <- 1:length(bigBlogData2$cnt_kw_t)
lm2 <- lm(score~., data=bigBlogData2)
summary(lm2)
dwtest(lm2)
par(mfrow=c(2,2))
plot(lm2, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(lm2, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(lm2, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(lm2, which=4)  # 극단치
bigBlogData3 <- bigBlogData
bigBlogData3$daysdiff2 <- bigBlogData3$daysdiff^2
lm3 <- lm(score~., data=bigBlogData3)
summary(lm3)
step3 <- step(lm3, direction = "both")
summary(step3)
dwtest(step3)
par(mfrow=c(2,2))
plot(step3, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(step3, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(step3, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(step3, which=4)  # 극단치
bigBlogData3 <- bigBlogData2
bigBlogData3[,-2]
bigBlogData3 <- bigBlogData3[,-2]
row.names(bigBlogData3) <- 1:length(bigBlogData3$cnt_kw_t)
bigBlogData3$daysdiff2 <- bigBlogData3$daysdiff^2
lm3 <- lm(score~., data=bigBlogData3)
summary(lm3)
step3 <- step(lm3, direction = "both")
summary(step3)
dwtest(step3)
par(mfrow=c(2,2))
plot(step3, which=1)  # 선형성(빨간 실선이 0에 가까운 수평선) & 독립성(특정한 모여있는 패턴이 발견되지 않음)
plot(step3, which=2)  # 정규성(직선에 가깝게 잘 모여있음)
plot(step3, which=3)  # 등분산성 & 독립성(적절하게 퍼져 있음, 특정 패턴 없음)
plot(step3, which=4)  # 극단치
pred <- blogData_gadi$items
row.names(pred) <- 1:length(pred$title)
pred$daysdiff2 <- pred$daysdiff^2
pred$score_pred <- predict(step3, pred)
pred$rank_pred <- as.integer(pred$score_pred * blogData_gadi$total)
plot(pred$rank_pred);abline(a=0, b=1, col="red")
pred <- blogData_gadi$items
row.names(pred) <- 1:length(pred$title)
pred$daysdiff2 <- pred$daysdiff^2
pred$score_pred <- predict(step3, pred)
pred <- tempfunc(pred)
row.names(pred) <- 1:length(pred$title)
pred$daysdiff2 <- pred$daysdiff^2
pred$score_pred <- predict(step3, pred)
blogData_gadi <- tempfunc(blogData_gadi)
pred <- blogData_gadi$items
row.names(pred) <- 1:length(pred$title)
pred$daysdiff2 <- pred$daysdiff^2
pred$score_pred <- predict(step3, pred)
pred$rank_pred <- as.integer(pred$score_pred * blogData_gadi$total)
plot(pred$rank_pred);abline(a=0, b=1, col="red")
plot(pred$rank_pred);abline(a=0, b=1, col="red")
plot(pred$score, pred$score_pred);abline(a=0, b=1, col="red")
summary(step3)
2.381e-05/5.945e-09
4005.046/2
2002.523 / 365
getwd()
knitr::opts_chunk$set(echo = TRUE)
student <- read.table(file='data\\student.txt', sep="")  # header=F
student
# 작업 경로를 변경해서 파일 참조를 쉽게 하기
getwd()
setwd('C:/rsource/data'); getwd()
# header가 있을 때
student1 <- read.table(file='student1.txt', sep="", header=T, stringsAsFactors = F)
student1
student <- read.table(file='data\\student.txt', sep="")  # header=F
student
# 작업 경로를 변경해서 파일 참조를 쉽게 하기
getwd()
setwd('C:\\rsource\\data'); getwd()
setwd('C:/rsource/data'); getwd()
setwd('C:\Users\admin\Desktop\GitHub\study\200730~ 데이터 분석(R)'); getwd()
setwd('C:\\Users\\admin\\Desktop\\GitHub\\study\\200730~ 데이터 분석(R)'); getwd()
setwd('%GITHUB_HOME')
setwd('%GITHUB_HOME%')
setwd('<GITHUB_HOME>')
setwd('C:\\Users\\admin\\Desktop\\GitHub\\study\\200730~ 데이터 분석(R)'); getwd()
getwd()
student <- read.table(file='data\\student.txt', sep="")  # header=F
student
### **텍스트 파일**
#### read.table로 불러오기
```{r}
student <- read.table(file='data\\student.txt', sep="")  # header=F
student
student <- read.table(file='data\\student.txt', sep="")  # header=F
student
# 작업 경로를 변경해서 파일 참조를 쉽게 하기
getwd()
setwd('C:\\Users\\admin\\Desktop\\GitHub\\study\\200730~ 데이터 분석(R)\\data'); getwd()
# header가 있을 때
student1 <- read.table(file='student1.txt', sep="", header=T, stringsAsFactors = F)
student1
# 데이터가 [Tab]이 아닌 다른 문자로 구분되어 있을 때
student2 <- read.table(file='student2.txt', sep=";", header=T, stringsAsFactors = F)
student2
# 파일 탐색기에서 직접 선택
student1_2 <- read.table(file=file.choose(), sep="", header=T, stringsAsFactors = F)
knitr::opts_chunk$set(echo = TRUE)
student <- read.table(file='data\\student.txt', sep="")  # header=F
student
# 작업 경로를 변경해서 파일 참조를 쉽게 하기
getwd()
setwd('C:\\Users\\admin\\Desktop\\GitHub\\study\\200730~ 데이터 분석(R)\\data'); getwd()
# header가 있을 때
student1 <- read.table(file='student1.txt', sep="", header=T, stringsAsFactors = F)
getwd()
student <- read.table(file='data\\student.txt', sep="")  # header=F
student
# 작업 경로를 변경해서 파일 참조를 쉽게 하기
getwd()
setwd('data'); getwd()
# header가 있을 때
student1 <- read.table(file='student1.txt', sep="", header=T, stringsAsFactors = F)
student1
# 데이터가 [Tab]이 아닌 다른 문자로 구분되어 있을 때
student2 <- read.table(file='student2.txt', sep=";", header=T, stringsAsFactors = F)
student2
# 파일 탐색기에서 직접 선택
student1_2 <- read.table(file=file.choose(), sep="", header=T, stringsAsFactors = F)
knitr::opts_chunk$set(echo = TRUE)
dataset2$resident2 <- ifelse(dataset2$resident==1,"1.서울특별시",
ifelse(dataset2$resident==2,"2.인천광역시",
ifelse(dataset2$resident==3,"3.대전광역시",
ifelse(dataset2$resident==4,"4.대구광역시",
ifelse(dataset2$resident==5,"5.시구군",)))))
# 범주형에서 이상치 확인
(freq_ol <- table(dataset$gender))
dataset <- read.csv("data\\dataset.csv",
header = T, stringsAsFactors = T)
# 범주형에서 이상치 확인
(freq_ol <- table(dataset$gender))
pie(freq_ol)    # 파이 차트
# subset()을 이용한 데이터 정제
dataset <- subset(dataset, gender==1 | gender==2)
length(dataset$gender)    # 300 -> 297
(freq_ol <- table(dataset$gender))
pie(freq_ol, col=c('red','blue'))
# 연속형 범주의 극단치 처리
dataset2 <- subset(dataset, price>=2 & price <=8)
dataset_ordered <- dataset2[order(dataset2$price),]
plot(dataset_ordered$price,
ylim=c(0,8))
dataset2$resident2 <- ifelse(dataset2$resident==1,"1.서울특별시",
ifelse(dataset2$resident==2,"2.인천광역시",
ifelse(dataset2$resident==3,"3.대전광역시",
ifelse(dataset2$resident==4,"4.대구광역시",
ifelse(dataset2$resident==5,"5.시구군",)))))
dataset2$resident2 <- ifelse(dataset2$resident==1,"1.서울특별시",
ifelse(dataset2$resident==2,"2.인천광역시",
ifelse(dataset2$resident==3,"3.대전광역시",
ifelse(dataset2$resident==4,"4.대구광역시",
ifelse(dataset2$resident==5,"5.시구군",NA)))))
dataset2$resident2[dataset2$resident ==1] <- "1.서울특별시"
dataset2$resident2[dataset2$resident ==2] <- "2.인천광역시"
dataset2$resident2[dataset2$resident ==3] <- "3.대전광역시"
dataset2$resident2[dataset2$resident ==4] <- "4.대구광역시"
dataset2$resident2[dataset2$resident ==5] <- "5.시구군"
dataset2$resident2 <- factor(dataset2$resident,
levels=c(1,2,3,4,5),
labels=c("1.서울특별시","2.인천광역시","3.대전광역시","4.대구광역시","5.시구군"))
install(rmarkdown)
install.packages(rmarkdown)
install.packages('rmarkdown')
install.packages("rmarkdown")
update.packages(rmarkdown)
update.packages('rmarkdown')
