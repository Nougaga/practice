{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# scikit learn classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import load_iris"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_dataset = load_iris()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 데이터 분리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_feat, test_feat, train_label, test_label = \\\n",
    "    train_test_split(iris_dataset['data'],\n",
    "                    iris_dataset['target'],\n",
    "                    test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_feat1, test_feat1, train_label1, test_label1 = \\\n",
    "    train_test_split(iris_dataset['data'],\n",
    "                    iris_dataset['target'],\n",
    "                    test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_feat2, test_feat2, train_label2, test_label2 = \\\n",
    "    train_test_split(iris_dataset['data'],\n",
    "                    iris_dataset['target'],\n",
    "                    test_size=0.3, random_state=41)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(105, 4)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_feat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(105,)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_label.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# random state 확인\n",
    "np.unique(train_feat == train_feat1) # 같은 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# random state 확인\n",
    "np.unique(train_feat == train_feat2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 다양한 머신러닝 분류 기법\n",
    "\n",
    "\n",
    "1. k-nearest neighbor(KNN, k-최근접 이웃)\n",
    "    - parameter : 이웃 수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. 모든 feature 사용\n",
    "\n",
    "X = iris_dataset.data\n",
    "y = iris_dataset.target\n",
    "\n",
    "X_train, X_test, y_train, y_test = \\\n",
    "    train_test_split(X,y, test_size=0.3, random_state=35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([34, 36, 35], dtype=int64)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.bincount(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 모델 객체 생성\n",
    "\n",
    "clf = KNeighborsClassifier(n_neighbors = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=3)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 모델 훈련\n",
    "\n",
    "clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 예측\n",
    "\n",
    "predict_label = clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True, False,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True, False, False,  True,  True,  True,\n",
       "        True,  True,  True, False,  True,  True,  True,  True,  True])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정학도\n",
    "\n",
    "predict_label == y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test accuracyt : 0.91\n"
     ]
    }
   ],
   "source": [
    "print('test accuracy : {:.2f}'.format(np.mean(predict_label == y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train set accuracy : 0.99\n",
      "test set accuracy : 0.91\n"
     ]
    }
   ],
   "source": [
    "## 적절한 k값 찾기 1\n",
    "\n",
    "# 모델 객체 생성\n",
    "clf1 = KNeighborsClassifier(n_neighbors = 3)\n",
    "\n",
    "# 모델 훈련\n",
    "clf1.fit(X_train, y_train)\n",
    "\n",
    "# 예측\n",
    "predict_label = clf1.predict(X_test)\n",
    "\n",
    "# 결과\n",
    "print('train set accuracy : {:.2f}'.format(clf1.score(X_train, y_train)))\n",
    "print('test set accuracy : {:.2f}'.format(clf1.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train set accuracy : 0.99\n",
      "test set accuracy : 0.96\n"
     ]
    }
   ],
   "source": [
    "## 적절한 k값 찾기 2\n",
    "\n",
    "# 모델 객체 생성\n",
    "clf2 = KNeighborsClassifier(n_neighbors = 7)\n",
    "\n",
    "# 모델 훈련\n",
    "clf2.fit(X_train, y_train)\n",
    "\n",
    "# 예측\n",
    "predict_label = clf2.predict(X_test)\n",
    "\n",
    "# 결과\n",
    "print('train set accuracy : {:.2f}'.format(clf2.score(X_train, y_train)))\n",
    "print('test set accuracy : {:.2f}'.format(clf2.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sepal length (cm)',\n",
       " 'sepal width (cm)',\n",
       " 'petal length (cm)',\n",
       " 'petal width (cm)']"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris_dataset.feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "## data split\n",
    "\n",
    "X1 = iris_dataset.data[:,2:4]\n",
    "y1 = iris_dataset.target\n",
    "\n",
    "X1_train, X1_test, y1_train, y1_test = \\\n",
    "    train_test_split(X1,y1, test_size=0.3, random_state=35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## 데이터 확인: 위에서 추출한 데이터와 동일\n",
    "\n",
    "np.unique(X1_train == X_train[:,2:4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([34, 36, 35], dtype=int64)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.bincount(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([34.,  0.,  0.,  0.,  0., 36.,  0.,  0.,  0., 35.]),\n",
       " array([0. , 0.2, 0.4, 0.6, 0.8, 1. , 1.2, 1.4, 1.6, 1.8, 2. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 모델 객체 생성\n",
    "\n",
    "clf3 = KNeighborsClassifier(n_neighbors = 21)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=21)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 모델 훈련\n",
    "\n",
    "clf3.fit(X1_train, y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 예측\n",
    "\n",
    "predict_label = clf3.predict(X1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True, False,  True,  True,  True,\n",
       "        True,  True,  True, False,  True,  True,  True,  True,  True])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확도\n",
    "\n",
    "predict_label == y1_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test accuracy : 0.96\n",
      "train set accuracy : 0.96\n",
      "test set accuracy : 0.96\n"
     ]
    }
   ],
   "source": [
    "print('test accuracy : {:.2f}'.format(np.mean(predict_label == y1_test)))\n",
    "print('train set accuracy : {:.2f}'.format(clf3.score(X1_train, y1_train)))\n",
    "print('test set accuracy : {:.2f}'.format(clf3.score(X1_test, y1_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_neigh = [3,7,21]\n",
    "train_acc = [clf1.score(X_train, y_train),\n",
    "            clf2.score(X_train, y_train),\n",
    "            clf3.score(X1_train, y1_train)]\n",
    "test_acc = [clf1.score(X_test, y_test),\n",
    "            clf2.score(X_test, y_test),\n",
    "            clf3.score(X1_test, y1_test)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.font_manager as fm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "font_path = 'C:\\\\WINDOWS\\\\Fonts\\\\malgun.ttf'\n",
    "font_name = fm.FontProperties(fname=font_path).get_name()\n",
    "plt.rcParams['font.family'] = font_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(n_neigh, train_acc, label=\"훈련 정확도\")\n",
    "plt.plot(n_neigh, test_acc, label=\"테스트 정확도\")\n",
    "plt.ylabel(\"accuracy\")\n",
    "plt.xlabel(\"number of neighbors\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 예제"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_breast_cancer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
